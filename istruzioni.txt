# UniAssistant: Guida alla Costruzione di un Assistente di Studio per Studenti Universitari

Ciao! Ti guiderò passo dopo passo nella creazione del tuo progetto UniAssistant. Come richiesto, ci concentreremo prima sul sito web, rimandando lo sviluppo dell'app mobile a una fase successiva, che è sicuramente un approccio più sensato.

## Struttura Generale del Progetto

Il nostro progetto sarà diviso in due parti principali:

1. **Frontend**: La parte visibile agli utenti, costruita con React
2. **Backend**: Il server che gestisce dati e logica, costruito con Node.js e Express

### Struttura delle Cartelle

```
uniassistant/
├── frontend/              # Applicazione React
│   ├── public/            # File statici
│   └── src/               # Codice sorgente React
│       ├── components/    # Componenti UI riutilizzabili
│       ├── context/       # Context API per lo stato globale
│       ├── pages/         # Pagine dell'applicazione
│       ├── utils/         # Funzioni di utilità
│       ├── App.js         # Componente principale
│       └── index.js       # Punto di ingresso
│
└── backend/               # Server Node.js
    ├── config/            # Configurazioni
    ├── controllers/       # Logica di business
    ├── middleware/        # Middleware personalizzati
    ├── models/            # Modelli del database
    ├── routes/            # Endpoint API
    └── server.js          # File principale del server
```

## Fase 1: Impostazione dell'Ambiente di Sviluppo

### Passo 1: Installare il Software Essenziale
1. **Editor di Codice**: Scarica e installa [Visual Studio Code](https://code.visualstudio.com/)
2. **Controllo Versione**: Installa [Git](https://git-scm.com/downloads)
3. **Node.js & npm**: Installa [Node.js](https://nodejs.org/) (include npm)
4. **Database**: Installa [MongoDB Community Edition](https://www.mongodb.com/try/download/community)

### Passo 2: Imparare lo Sviluppo Web di Base
Prima di immergerti nei framework, dedica 2-3 settimane ad apprendere:
- Fondamenti di HTML, CSS (usa [MDN Web Docs](https://developer.mozilla.org/))
- Basi di JavaScript (variabili, funzioni, oggetti, promise)
- Concetti base di database

### Passo 3: Creare la Struttura del Progetto
```bash
mkdir uniassistant
cd uniassistant
npm init -y
git init
touch .gitignore
```

Aggiungi questo contenuto al file .gitignore:
```text
node_modules/
.env
.DS_Store
build/
dist/
```

## Fase 2: Creazione del Frontend (React)

### Passo 1: Impostare React
```bash
npx create-react-app frontend
cd frontend
npm start
```

Questo creerà una cartella `frontend` con una struttura di base per un'applicazione React. Il comando `npm start` avvierà un server di sviluppo locale e aprirà l'app nel browser.

### Passo 2: Struttura delle Cartelle del Frontend

Ora creiamo una struttura più organizzata all'interno della cartella `frontend/src`:

```bash
cd src
mkdir components context pages utils
```

Ogni cartella ha uno scopo specifico:
- **components**: Contiene componenti UI riutilizzabili
- **context**: Contiene file per la gestione dello stato globale
- **pages**: Contiene le pagine complete dell'applicazione
- **utils**: Contiene funzioni di utilità

### Passo 3: Componenti Base dell'Interfaccia

Creiamo il componente Dashboard che rappresenterà la pagina principale:

```jsx
// frontend/src/components/Dashboard.js
import React from 'react';

function Dashboard() {
  return (
    <div className="dashboard">
      <h1>Dashboard UniAssistant</h1>
      <div className="dashboard-content">
        <div className="today-plan">
          <h2>Piano di Studio di Oggi</h2>
          <p>Nessuna sessione di studio pianificata.</p>
        </div>
        <div className="progress">
          <h2>I Tuoi Progressi</h2>
          <p>Inizia a tracciare le tue sessioni di studio per vedere i progressi.</p>
        </div>
      </div>
    </div>
  );
}

export default Dashboard;
```

Modifichiamo il file App.js principale:

```jsx
// frontend/src/App.js
import React from 'react';
import Dashboard from './components/Dashboard';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>UniAssistant</h1>
      </header>
      <main>
        <Dashboard />
      </main>
    </div>
  );
}

export default App;
```

### Passo 4: Stile CSS di Base

Modifichiamo il file CSS per dare uno stile iniziale:

```css
/* frontend/src/App.css */
.App {
  font-family: 'Arial', sans-serif;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.App-header {
  background-color: #4a69bd;
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
}

.dashboard {
  margin-top: 20px;
}

.dashboard-content {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

@media (max-width: 768px) {
  .dashboard-content {
    grid-template-columns: 1fr;
  }
}

.today-plan, .progress {
  background-color: #f8f9fa;
  padding: 15px;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}
```

## Fase 3: Creazione del Backend (Node.js & Express)

### Passo 1: Impostare la Struttura del Backend
```bash
mkdir backend
cd backend
npm init -y
npm install express mongoose dotenv cors
mkdir config controllers middleware models routes
touch server.js
```

### Passo 2: Creare il Server Express di Base
```javascript
// backend/server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Rotte
app.get('/', (req, res) => {
  res.json({ message: 'Benvenuto nell\'API di UniAssistant' });
});

// Connessione a MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/uniassistant')
  .then(() => console.log('MongoDB connesso'))
  .catch(err => console.error('Errore di connessione MongoDB:', err));

app.listen(PORT, () => {
  console.log(`Server in esecuzione sulla porta ${PORT}`);
});
```

### Passo 3: Creare il File .env
```text
// backend/.env
PORT=5000
MONGODB_URI=mongodb://localhost:27017/uniassistant
JWT_SECRET=iltuosegretomoltosicuro
```

## Fase 4: Sviluppo delle Funzionalità Core

### Passo 1: Definizione dei Modelli di Dati

Creiamo i modelli per gli utenti, i corsi e le sessioni di studio.

```javascript
// backend/models/User.js
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  nome: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  password: {
    type: String,
    required: true
  }
}, { timestamps: true });

module.exports = mongoose.model('User', UserSchema);
```

```javascript
// backend/models/Course.js
const mongoose = require('mongoose');

const CourseSchema = new mongoose.Schema({
  nome: {
    type: String,
    required: true
  },
  crediti: {
    type: Number,
    required: true
  },
  dataEsame: {
    type: Date,
    required: true
  },
  difficolta: {
    type: Number,
    min: 1,
    max: 5,
    default: 3
  },
  materiali: [
    {
      titolo: String,
      link: String,
      tipo: String // es. 'pdf', 'video', 'articolo'
    }
  ],
  utente: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }
}, { timestamps: true });

module.exports = mongoose.model('Course', CourseSchema);
```

```javascript
// backend/models/StudySession.js
const mongoose = require('mongoose');

const StudySessionSchema = new mongoose.Schema({
  corso: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Course',
    required: true
  },
  durata: {
    type: Number, // in minuti
    required: true
  },
  oraInizio: {
    type: Date,
    default: Date.now
  },
  argomenti: [String],
  valutazioneEfficacia: {
    type: Number,
    min: 1,
    max: 5
  },
  note: String,
  utente: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }
}, { timestamps: true });

module.exports = mongoose.model('StudySession', StudySessionSchema);
```

### Passo 2: Implementazione dell'Autenticazione degli Utenti

Prima installiamo i pacchetti necessari:

```bash
cd backend
npm install bcryptjs jsonwebtoken
```

Ora creiamo il middleware di autenticazione:

```javascript
// backend/middleware/auth.js
const jwt = require('jsonwebtoken');

module.exports = function(req, res, next) {
  // Ottieni il token dall'header
  const token = req.header('x-auth-token');

  // Controlla se il token non esiste
  if (!token) {
    return res.status(401).json({ msg: 'Nessun token, autorizzazione negata' });
  }

  try {
    // Verifica il token
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret');

    // Aggiungi l'utente dalla payload
    req.user = decoded.user;
    next();
  } catch (err) {
    res.status(401).json({ msg: 'Il token non è valido' });
  }
};
```

Poi creiamo le rotte per l'autenticazione:

```javascript
// backend/routes/auth.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Registrazione di un nuovo utente
router.post('/register', async (req, res) => {
  try {
    const { nome, email, password } = req.body;
    
    // Controlla se l'utente esiste già
    let utente = await User.findOne({ email });
    if (utente) {
      return res.status(400).json({ msg: 'L\'utente esiste già' });
    }
    
    // Crea un nuovo utente
    utente = new User({
      nome,
      email,
      password
    });
    
    // Cripta la password
    const salt = await bcrypt.genSalt(10);
    utente.password = await bcrypt.hash(password, salt);
    
    await utente.save();
    
    // Crea il JWT
    const payload = {
      user: {
        id: utente.id
      }
    };
    
    jwt.sign(
      payload,
      process.env.JWT_SECRET || 'secret',
      { expiresIn: '7d' },
      (err, token) => {
        if (err) throw err;
        res.json({ token });
      }
    );
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Errore del server');
  }
});

// Login utente
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Controlla se l'utente esiste
    const utente = await User.findOne({ email });
    if (!utente) {
      return res.status(400).json({ msg: 'Credenziali non valide' });
    }
    
    // Controlla la password
    const isMatch = await bcrypt.compare(password, utente.password);
    if (!isMatch) {
      return res.status(400).json({ msg: 'Credenziali non valide' });
    }
    
    // Crea JWT
    const payload = {
      user: {
        id: utente.id
      }
    };
    
    jwt.sign(
      payload,
      process.env.JWT_SECRET || 'secret',
      { expiresIn: '7d' },
      (err, token) => {
        if (err) throw err;
        res.json({ token });
      }
    );
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Errore del server');
  }
});

module.exports = router;
```

### Passo 3: Collegare le Rotte al Server

Modifichiamo il file server.js per includere le rotte di autenticazione:

```javascript
// backend/server.js
// ... codice esistente ...

// Importa le rotte
const authRoutes = require('./routes/auth');

// Usa le rotte
app.use('/api/auth', authRoutes);

// ... resto del codice ...
```

### Passo 4: Gestione dei Corsi

Creiamo le rotte per la gestione dei corsi:

```javascript
// backend/routes/courses.js
const express = require('express');
const router = express.Router();
const auth = require('../middleware/auth');
const Course = require('../models/Course');

// Ottieni tutti i corsi di un utente
router.get('/', auth, async (req, res) => {
  try {
    const corsi = await Course.find({ utente: req.user.id }).sort({ dataEsame: 1 });
    res.json(corsi);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Errore del server');
  }
});

// Aggiungi un nuovo corso
router.post('/', auth, async (req, res) => {
  try {
    const { nome, crediti, dataEsame, difficolta, materiali } = req.body;

    const nuovoCorso = new Course({
      nome,
      crediti,
      dataEsame,
      difficolta,
      materiali: materiali || [],
      utente: req.user.id
    });

    const corso = await nuovoCorso.save();
    res.json(corso);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Errore del server');
  }
});

// Aggiorna corso
router.put('/:id', auth, async (req, res) => {
  try {
    let corso = await Course.findById(req.params.id);
    
    if (!corso) return res.status(404).json({ msg: 'Corso non trovato' });
    
    // Assicurati che l'utente possieda il corso
    if (corso.utente.toString() !== req.user.id) {
      return res.status(401).json({ msg: 'Non autorizzato' });
    }
    
    corso = await Course.findByIdAndUpdate(
      req.params.id,
      { $set: req.body },
      { new: true }
    );
    
    res.json(corso);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Errore del server');
  }
});

// Elimina corso
router.delete('/:id', auth, async (req, res) => {
  try {
    let corso = await Course.findById(req.params.id);
    
    if (!corso) return res.status(404).json({ msg: 'Corso non trovato' });
    
    // Assicurati che l'utente possieda il corso
    if (corso.utente.toString() !== req.user.id) {
      return res.status(401).json({ msg: 'Non autorizzato' });
    }
    
    await Course.findByIdAndRemove(req.params.id);
    
    res.json({ msg: 'Corso rimosso' });
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Errore del server');
  }
});

module.exports = router;
```

Aggiorniamo server.js per includere le rotte dei corsi:

```javascript
// backend/server.js
// ... codice esistente ...

// Importa le rotte
const authRoutes = require('./routes/auth');
const courseRoutes = require('./routes/courses');

// Usa le rotte
app.use('/api/auth', authRoutes);
app.use('/api/courses', courseRoutes);

// ... resto del codice ...
```

## Fase 5: Implementazione dell'Autenticazione sul Frontend

### Passo 1: Installare i Pacchetti Necessari
```bash
cd frontend
npm install axios react-router-dom
```

### Passo 2: Creare il Context per l'Autenticazione
```jsx
// frontend/src/context/AuthContext.js
import React, { createContext, useState, useEffect } from 'react';
import axios from 'axios';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [utente, setUtente] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);

  // Controlla se l'utente è già loggato
  useEffect(() => {
    const checkLoggedIn = async () => {
      if (localStorage.token) {
        setAuthToken(localStorage.token);
        try {
          const res = await axios.get('/api/auth');
          setUtente(res.data);
          setIsAuthenticated(true);
        } catch (err) {
          localStorage.removeItem('token');
        }
      }
      setLoading(false);
    };
    
    checkLoggedIn();
  }, []);

  // Imposta il token di autenticazione per axios
  const setAuthToken = token => {
    if (token) {
      axios.defaults.headers.common['x-auth-token'] = token;
    } else {
      delete axios.defaults.headers.common['x-auth-token'];
    }
  };

  // Registra utente
  const register = async formData => {
    try {
      const res = await axios.post('/api/auth/register', formData);
      localStorage.setItem('token', res.data.token);
      setAuthToken(res.data.token);
      
      // Carica utente
      const userRes = await axios.get('/api/auth');
      setUtente(userRes.data);
      setIsAuthenticated(true);
      return true;
    } catch (err) {
      return false;
    }
  };

  // Login utente
  const login = async formData => {
    try {
      const res = await axios.post('/api/auth/login', formData);
      localStorage.setItem('token', res.data.token);
      setAuthToken(res.data.token);
      
      // Carica utente
      const userRes = await axios.get('/api/auth');
      setUtente(userRes.data);
      setIsAuthenticated(true);
      return true;
    } catch (err) {
      return false;
    }
  };

  // Logout
  const logout = () => {
    localStorage.removeItem('token');
    setAuthToken();
    setUtente(null);
    setIsAuthenticated(false);
  };

  return (
    <AuthContext.Provider
      value={{
        utente,
        isAuthenticated,
        loading,
        register,
        login,
        logout
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};
```

### Passo 3: Creare i Componenti per Login e Registrazione
```jsx
// frontend/src/components/auth/Login.js
import React, { useState, useContext } from 'react';
import { AuthContext } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';

const Login = () => {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [errore, setErrore] = useState('');
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();

  const { email, password } = formData;

  const onChange = e => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const onSubmit = async e => {
    e.preventDefault();
    const success = await login(formData);
    if (success) {
      navigate('/dashboard');
    } else {
      setErrore('Credenziali non valide');
    }
  };

  return (
    <div className="auth-form">
      <h2>Accedi a UniAssistant</h2>
      {errore && <div className="alert alert-danger">{errore}</div>}
      <form onSubmit={onSubmit}>
        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            name="email"
            value={email}
            onChange={onChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Password</label>
          <input
            type="password"
            name="password"
            value={password}
            onChange={onChange}
            required
            minLength="6"
          />
        </div>
        <button type="submit">Accedi</button>
      </form>
    </div>
  );
};

export default Login;
```

```jsx
// frontend/src/components/auth/Register.js
import React, { useState, useContext } from 'react';
import { AuthContext } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';

const Register = () => {
  const [formData, setFormData] = useState({
    nome: '',
    email: '',
    password: '',
    password2: ''
  });
  const [errore, setErrore] = useState('');
  const { register } = useContext(AuthContext);
  const navigate = useNavigate();

  const { nome, email, password, password2 } = formData;

  const onChange = e => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const onSubmit = async e => {
    e.preventDefault();
    if (password !== password2) {
      setErrore('Le password non coincidono');
    } else {
      const success = await register({
        nome,
        email,
        password
      });
      if (success) {
        navigate('/dashboard');
      } else {
        setErrore('Registrazione fallita');
      }
    }
  };

  return (
    <div className="auth-form">
      <h2>Registrati a UniAssistant</h2>
      {errore && <div className="alert alert-danger">{errore}</div>}
      <form onSubmit={onSubmit}>
        <div className="form-group">
          <label>Nome</label>
          <input
            type="text"
            name="nome"
            value={nome}
            onChange={onChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            name="email"
            value={email}
            onChange={onChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Password</label>
          <input
            type="password"
            name="password"
            value={password}
            onChange={onChange}
            required
            minLength="6"
          />
        </div>
        <div className="form-group">
          <label>Conferma Password</label>
          <input
            type="password"
            name="password2"
            value={password2}
            onChange={onChange}
            required
            minLength="6"
          />
        </div>
        <button type="submit">Registrati</button>
      </form>
    </div>
  );
};

export default Register;
```

## Fase 6: Implementazione della Gestione dei Corsi sul Frontend

### Passo 1: Creare il Componente per il Form di Aggiunta Corso
```jsx
// frontend/src/components/courses/CourseForm.js
import React, { useState } from 'react';
import axios from 'axios';

const CourseForm = ({ addCorso }) => {
  const [formData, setFormData] = useState({
    nome: '',
    crediti: '',
    dataEsame: '',
    difficolta: 3,
    materiali: []
  });

  const { nome, crediti, dataEsame, difficolta } = formData;

  const onChange = e => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const onSubmit = async e => {
    e.preventDefault();
    try {
      const config = {
        headers: {
          'Content-Type': 'application/json',
          'x-auth-token': localStorage.token
        }
      };

      const res = await axios.post('/api/courses', formData, config);
      addCorso(res.data);
      // Pulisci form
      setFormData({
        nome: '',
        crediti: '',
        dataEsame: '',
        difficolta: 3,
        materiali: []
      });
    } catch (err) {
      console.error('Errore nell\'aggiunta del corso:', err.response.data);
    }
  };

  return (
    <div className="course-form">
      <h2>Aggiungi Nuovo Corso</h2>
      <form onSubmit={onSubmit}>
        <div className="form-group">
          <label>Nome del Corso</label>
          <input
            type="text"
            name="nome"
            value={nome}
            onChange={onChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Crediti (CFU)</label>
          <input
            type="number"
            name="crediti"
            value={crediti}
            onChange={onChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Data Esame</label>
          <input
            type="date"
            name="dataEsame"
            value={dataEsame}
            onChange={onChange}
            required
          />
        </div>
        <div className="form-group">
          <label>Difficoltà (1-5)</label>
          <input
            type="range"
            name="difficolta"
            min="1"
            max="5"
            value={difficolta}
            onChange={onChange}
          />
          <span>{difficolta}</span>
        </div>
        <button type="submit">Aggiungi Corso</button>
      </form>
    </div>
  );
};

export default CourseForm;
```

### Passo 2: Creare il Componente per la Lista dei Corsi
```jsx
// frontend/src/components/courses/CourseList.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import CourseForm from './CourseForm';
import CourseItem from './CourseItem';

const CourseList = () => {
  const [corsi, setCorsi] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    getCorsi();
  }, []);

  const getCorsi = async () => {
    try {
      const config = {
        headers: {
          'x-auth-token': localStorage.token
        }
      };
      const res = await axios.get('/api/courses', config);
      setCorsi(res.data);
      setLoading(false);
    } catch (err) {
      console.error('Errore nel recupero dei corsi:', err.response.data);
      setLoading(false);
    }
  };

  const addCorso = corso => {
    setCorsi([...corsi, corso]);
  };

  const deleteCorso = async id => {
    try {
      const config = {
        headers: {
          'x-auth-token': localStorage.token
        }
      };
      await axios.delete(`/api/courses/${id}`, config);
      setCorsi(corsi.filter(corso => corso._id !== id));
    } catch (err) {
      console.error('Errore nell\'eliminazione del corso:', err.response.data);
    }
  };

  if (loading) {
    return <div>Caricamento corsi...</div>;
  }

  return (
    <div className="course-container">
      <h1>I Tuoi Corsi</h1>
      <CourseForm addCorso={addCorso} />
      <div className="course-list">
        {corsi.length === 0 ? (
          <p>Nessun corso ancora. Aggiungi il tuo primo corso sopra!</p>
        ) : (
          corsi.map(corso => (
            <CourseItem 
              key={corso._id} 
              corso={corso} 
              deleteCorso={deleteCorso} 
            />
          ))
        )}
      </div>
    </div>
  );
};

export default CourseList;
```

### Passo 3: Creare il Componente per il Singolo Corso
```jsx
// frontend/src/components/courses/CourseItem.js
import React from 'react';

const CourseItem = ({ corso, deleteCorso }) => {
  const { _id, nome, crediti, dataEsame, difficolta } = corso;
  
  // Formatta data
  const dataFormattata = new Date(dataEsame).toLocaleDateString();
  
  // Giorni rimanenti all'esame
  const giorniRimanenti = Math.ceil((new Date(dataEsame) - new Date()) / (1000 * 60 * 60 * 24));
  
  return (
    <div className="course-item">
      <div className="course-header">
        <h3>{nome}</h3>
        <span className="course-credits">{crediti} CFU</span>
      </div>
      
      <div className="course-details">
        <p>
          <strong>Data Esame:</strong> {dataFormattata} 
          <span className={`days-until ${giorniRimanenti < 7 ? 'urgent' : giorniRimanenti < 14 ? 'warning' : ''}`}>
            ({giorniRimanenti} giorni)
          </span>
        </p>
        
        <p>
          <strong>Difficoltà:</strong> 
          <span className="difficulty-rating">
            {'★'.repeat(difficolta)}{'☆'.repeat(5-difficolta)}
          </span>
        </p>
      </div>
      
      <div className="course-actions">
        <button onClick={() => deleteCorso(_id)} className="btn-delete">
          Elimina
        </button>
      </div>
    </div>
  );
};

export default CourseItem;
```

## Fase 7: Implementazione del Timer Pomodoro

Creiamo un componente per il timer Pomodoro:

```jsx
// frontend/src/components/study/StudyTimer.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const StudyTimer = ({ corsi }) => {
  const [corsoSelezionato, setCorsoSelezionato] = useState('');
  const [timerAttivo, setTimerAttivo] = useState(false);
  const [tempoRimanente, setTempoRimanente] = useState(25 * 60); // 25 minuti in secondi
  const [isPausa, setIsPausa] = useState(false);
  const [argomenti, setArgomenti] = useState('');
  const [tipoTimer, setTipoTimer] = useState('25/5'); // Default 25/5 Pomodoro
  
  // Impostazioni timer
  const impostazioniTimer = {
    '25/5': { lavoro: 25 * 60, pausa: 5 * 60 },
    '50/10': { lavoro: 50 * 60, pausa: 10 * 60 },
    'custom': { lavoro: 30 * 60, pausa: 5 * 60 } // Valori custom di default
  };
  
  useEffect(() => {
    let intervallo = null;
    
    if (timerAttivo && tempoRimanente > 0) {
      intervallo = setInterval(() => {
        setTempoRimanente(tempoRimanente - 1);
      }, 1000);
    } else if (timerAttivo && tempoRimanente === 0) {
      if (isPausa) {
        // La pausa è terminata, inizia sessione di lavoro
        setIsPausa(false);
        setTempoRimanente(impostazioniTimer[tipoTimer].lavoro);
        riproduciSuonoNotifica();
      } else {
        // La sessione di lavoro è terminata, inizia pausa
        setIsPausa(true);
        setTempoRimanente(impostazioniTimer[tipoTimer].pausa);
        salvaSessione();
        riproduciSuonoNotifica();
      }
    } else {
      clearInterval(intervallo);
    }
    
    return () => clearInterval(intervallo);
  }, [timerAttivo, tempoRimanente, isPausa, tipoTimer]);
  
  const formattaTempo = secondi => {
    const minuti = Math.floor(secondi / 60);
    const secondiRimanenti = secondi % 60;
    return `${minuti.toString().padStart(2, '0')}:${secondiRimanenti.toString().padStart(2, '0')}`;
  };
  
  const toggleTimer = () => {
    if (!timerAttivo && !corsoSelezionato) {
      alert('Seleziona prima un corso');
      return;
    }
    setTimerAttivo(!timerAttivo);
  };
  
  const resetTimer = () => {
    setTimerAttivo(false);
    setIsPausa(false);
    setTempoRimanente(impostazioniTimer[tipoTimer].lavoro);
  };
  
  const cambiaTipoTimer = e => {
    const nuovoTipo = e.target.value;
    setTipoTimer(nuovoTipo);
    setTempoRimanente(impostazioniTimer[nuovoTipo].lavoro);
    setTimerAttivo(false);
    setIsPausa(false);
  };
  
  const riproduciSuonoNotifica = () => {
    // In un'app reale, qui riprodurresti un suono
    console.log('Suono di notifica riprodotto');
  };
  
  const salvaSessione = async () => {
    if (!corsoSelezionato) return;
    
    try {
      const config = {
        headers: {
          'Content-Type': 'application/json',
          'x-auth-token': localStorage.token
        }
      };
      
      await axios.post('/api/study-sessions', {
        corso: corsoSelezionato,
        durata: impostazioniTimer[tipoTimer].lavoro / 60, // Converti in minuti
        argomenti: argomenti.split(',').map(t => t.trim()).filter(t => t !== '')
      }, config);
      
      console.log('Sessione di studio salvata');
    } catch (err) {
      console.error('Errore nel salvataggio della sessione di studio:', err.response?.data);
    }
  };
  
  return (
    <div className="study-timer">
      <h2>{isPausa ? 'Pausa!' : 'Sessione di Studio'}</h2>
      
      <div className="timer-settings">
        <div className="form-group">
          <label>Corso</label>
          <select 
            value={corsoSelezionato} 
            onChange={(e) => setCorsoSelezionato(e.target.value)}
            disabled={timerAttivo}
          >
            <option value="">Seleziona un corso</option>
            {corsi && corsi.map(corso => (
              <option key={corso._id} value={corso._id}>
                {corso.nome}
              </option>
            ))}
          </select>
        </div>
        
        <div className="form-group">
          <label>Tipo di Timer</label>
          <select 
            value={tipoTimer} 
            onChange={cambiaTipoTimer}
            disabled={timerAttivo}
          >
            <option value="25/5">Pomodoro (25/5)</option>
            <option value="50/10">Lungo (50/10)</option>
            <option value="custom">Personalizzato</option>
          </select>
        </div>
        
        {!isPausa && (
          <div className="form-group">
            <label>Argomenti (separati da virgole)</label>
            <input
              type="text"
              value={argomenti}
              onChange={(e) => setArgomenti(e.target.value)}
              placeholder="Cosa stai studiando?"
              disabled={timerAttivo}
            />
          </div>
        )}
      </div>
      
      <div className="timer-display">
        <div className={`time ${isPausa ? 'break-time' : 'work-time'}`}>
          {formattaTempo(tempoRimanente)}
        </div>
        <p className="timer-label">
          {isPausa ? 'Fai una pausa! Stiracchiati, idratati, riposa gli occhi.' : 'Tempo di concentrazione'}
        </p>
      </div>
      
      <div className="timer-controls">
        <button 
          className={timerAttivo ? 'pause' : 'start'} 
          onClick={toggleTimer}
        >
          {timerAttivo ? 'Pausa' : 'Avvia'}
        </button>
        <button className="reset" onClick={resetTimer}>
          Reset
        </button>
      </div>
    </div>
  );
};

export default StudyTimer;
```

## Fase 8: Aggiungere React Router per la Navigazione

Configuriamo le rotte per l'applicazione:

```jsx
// frontend/src/App.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Dashboard from './components/Dashboard';
import Login from './components/auth/Login';
import Register from './components/auth/Register';
import CourseList from './components/courses/CourseList';
import StudyTimer from './components/study/StudyTimer';
import { AuthProvider } from './context/AuthContext';
import './App.css';

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="App">
          <header className="App-header">
            <h1>UniAssistant</h1>
          </header>
          <main>
            <Routes>
              <Route path="/" element={<Login />} />
              <Route path="/register" element={<Register />} />
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/courses" element={<CourseList />} />
              <Route path="/study" element={<StudyTimer />} />
            </Routes>
          </main>
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;
```

## Piano di Lavoro

Ecco un piano di lavoro dettagliato per implementare il progetto:

1. **Settimana 1-2**: Imparare le basi di HTML, CSS, JavaScript
   - Completare tutorial online su MDN Web Docs
   - Esercitarsi con piccoli progetti

2. **Settimana 3**: Impostare l'ambiente di sviluppo
   - Installare tutti i software necessari
   - Creare la struttura del progetto

3. **Settimana 4-5**: Sviluppo del Backend
   - Implementare il server Express
   - Creare i modelli di dati
   - Implementare l'autenticazione

4. **Settimana 6-7**: Sviluppo del Frontend Base
   - Creare il layout principale
   - Implementare l'autenticazione sul frontend
   - Creare i componenti base

5. **Settimana 8-9**: Implementare le Funzionalità Core
   - Gestione dei corsi
   - Timer Pomodoro
   - Pianificazione base dello studio

6. **Settimana 10-12**: Perfezionamento e Testing
   - Migliorare l'UI/UX
   - Testare tutte le funzionalità
   - Correggere bug

## Risorse di Apprendimento

1. **React**: 
   - [Documentazione React](https://it.reactjs.org/docs/getting-started.html)
   - [Tutorial React](https://it.reactjs.org/tutorial/tutorial.html)

2. **Node.js/Express**:
   - [Documentazione Express](https://expressjs.com/it/)
   - [Documentazione Node.js](https://nodejs.org/it/docs/)

3. **MongoDB**:
   - [MongoDB University](https://university.mongodb.com/) (corsi gratuiti)
   - [Documentazione MongoDB](https://docs.mongodb.com/manual/)

4. **Apprendimento Automatico**:
   - [TensorFlow.js](https://www.tensorflow.org/js)
   - [Corso Introduttivo al Machine Learning](https://developers.google.com/machine-learning/crash-course)

## Conclusione

Questo è un piano dettagliato per sviluppare il tuo UniAssistant. Concentrandoci prima sul sito web, potrai creare una solida base di funzionalità prima di espandere il progetto a un'app mobile in futuro. Ricorda di suddividere questo grande progetto in obiettivi più piccoli e gestibili. Costruisci prima le funzionalità di base e poi aggiungi gradualmente funzionalità più avanzate man mano che acquisisci esperienza. Buona fortuna con il tuo progetto UniAssistant!